@* Authors: SA,BM,SM
     Date: 15-01-2021
    Aim : To create, view ,edit Grade *@

@page "/grade"
@using TuitionsOnlineAdmin.UseCases.Grades.CreateGradeScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.Grades.ViewGradeScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.Grades.UpdateGradeScreen.Interface
@inject ICreateGradeUseCase instanceOfICreateGradeUseCase
@inject IViewGradeUseCase instanceOfIViewGradeUseCase
@inject IUpdateGradeUseCase instanceOfIUpdateGradeUseCase
<div>
    <DxTextBox TextChanged="@((searchText) => OnTextChanged(searchText))"

               ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
               SizeMode="SizeMode.Small"
               NullText="Search for Grades ...."></DxTextBox>
</div>
<br />

@*Table*@
<DxDataGrid Data="@gradeList"
            RowInserting="@((newGrade) => CreateGrade(newGrade))"
            RowUpdating="@((gradeToBeUpdated, newValue) => UpdateGrade(gradeToBeUpdated, newValue))"
            PageSize="5">
    <DxDataGridColumn Field="@nameof(Grade.GradeName)" Width="300px" Caption="Grade" />
    <DxDataGridCheckBoxColumn Field="@nameof(Grade.Active)" Width="200px" />
    <DxDataGridCommandColumn Width="200px" DeleteButtonVisible="false" />
</DxDataGrid>

@code {


    @* To hold the hold the Grade details*@
    IEnumerable<Grade> gradeList = Enumerable.Empty<Grade>();
    @*To hold the search text*@
    String searchkey;
    @*The init method is to invoke the Grade list when the page is loaded*@
    protected override void OnInitialized()
    {

        @*To invoke the GetGrades() to fetch the Grade list to be displayed*@
        GetGrades(searchkey);

    }
    @*To get Grade list to be displayed in the data grid columns*@
    public void GetGrades(String searchkeyword)
    {
        gradeList = instanceOfIViewGradeUseCase.ViewGrade(searchkeyword);
    }
    void OnTextChanged(String searchText)
    {
        Console.WriteLine(searchText);
        searchkey = searchText;
        @*To invoke the component to re-render the data*@

        InvokeAsync(StateHasChanged);

        @*The course list should be fetched again to diplay the newly created course along with the existing the course list *@
        GetGrades(searchkey);
    }

    //create Grade
    @*The CreateGrade() method is responsible for capturing the details enetred by the user and send it to the database.*@
    void CreateGrade(Dictionary<string, object> newGrade)
    {
        @* To hold the new Grade to be created *@
        Grade createGrade = new Grade();
        @*The new value comes in the form of key value pair*@
        foreach (var field in newGrade.Keys)
        {
            @*For each incoming key we check and assign the values to newGrade *@
            switch (field)
            {
                case "GradeName":
                    createGrade.GradeName = (string)newGrade[field];
                    break;
                case "Active":
                    createGrade.Active = (bool)newGrade[field];
                    break;
            }
        }

        @*To invoke the method to create new Grade*@
        instanceOfICreateGradeUseCase.CreateGrade(createGrade);
        @*The StateHasChanged makes sure that the component is notified to re-render the data*@
        InvokeAsync(StateHasChanged);
        @*The course list should be fetched again to diplay the newly created Grade along with the existing the course list *@
        GetGrades(searchkey);


    }


    //To take and update the value for  Grade
    void UpdateGrade(Grade gradeToBeUpdated, Dictionary<string, object> newValue)
    {

        foreach (var grade in newValue.Keys)
        {
            switch (grade)
            {
                case "GradeName":
                    gradeToBeUpdated.GradeName = (string)newValue[grade];
                    break;
                case "Active":
                    gradeToBeUpdated.Active = (bool)newValue[grade];
                    break;
            }

        }

        @*GradeToBeUpdated this variable holds the updated value and is sent to the database*@
        instanceOfIUpdateGradeUseCase.UpdateGrade(gradeToBeUpdated);
        @*The StateHasChanged makes sure that the component is notified to re-render the data*@
        InvokeAsync(StateHasChanged);
        @*The course list should be fetched again to diplay the newly created course along with the existing the course list *@
        GetGrades(searchkey);

    }


}
