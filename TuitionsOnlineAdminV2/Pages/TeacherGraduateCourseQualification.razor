@page "/TeacherGraduateCourseQualification"
@*Authors : SA,BM,KK,SM,BA
    Date:19/02/2021
    Aim: To create a serach box and to display the list of teachers  *@

@*Aim:Referring usecase of TeacherBasicInformation *@

@using TuitionsOnlineAdmin.UseCases.TeacherBasicInformations.ViewTeacherBasicInformationScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.TeacherGraduateCourse_Qualifications.ViewTeacherGraduateCourseQualificationScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.TeacherGraduateCourse_Qualifications.CreateTeacherGraduateCourseQualificationScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.GraduateCourses.ViewGraduateCourseScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.TeacherGraduateCourse_Qualifications.EditGraduateCourseQualification.Interfaces

@inject IViewTeacherBasicInformationUseCase diIViewTeacherBasicInformationUseCase;
@inject IViewTeacherGraduateCourseQualificationUseCase diIViewTeacherGraduateCourseQualificationUseCase;
@inject IViewGraduateCourseUseCase diIViewGraduateCourseUseCase;
@inject ICreateTeacherGraduateCourseQualificationUseCase diICreateTeacherGraduateCourseQualificationUseCase;
@inject IEditGraduateCourseQualificationUseCase diIEditGraduateCourseQualificationUseCase;



<DxGridLayout CssClass="mw-1100 dxgridlayout_style" style=" height: auto; margin-bottom: 10px;">
    <Rows>
        <DxGridLayoutRow Height="auto" />
    </Rows>
    <Columns>
        <DxGridLayoutColumn Width="50%" />
        <DxGridLayoutColumn Width="50%" />
    </Columns>
    <Items>
        <DxGridLayoutItem Row="0" Column="0">
            <Template>
                <div class=" dxgridlayoutitem_style">
                    <center><h5>Select Teacher Name</h5></center>

                    <div>

                        <DxTextBox NullText="Search Teachers" SizeMode="SizeMode.Small" ColSpanMd="6" TextChanged="@((searchTeacherKeyword) => onChangeTeacherSearchText(searchTeacherKeyword))"> </DxTextBox>


                        @*<div style="margin-top: 33px; margin-left: 10px;">*@

                        <DxButton RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Search Teacher" SizeMode="SizeMode.Small" ColSpanMd="6" Enabled="@enableOrDisableSearchTeacherButton" Click="@getTeacherListOnSearch" />
                    </div>
                    <br />

                    <DxDataGrid Data="@teacherDetailsList"
                                @bind-SingleSelectedDataRow="@onSelectOfTeacher"
                                CssClass="mw-1100">
                        <DxDataGridSelectionColumn Width="50px"></DxDataGridSelectionColumn>
                        <DxDataGridColumn Field="@nameof(TeacherBasicInformation.Teacher_Name)" Caption="Teacher Name"></DxDataGridColumn>
                        <DxDataGridColumn Field="@nameof(TeacherBasicInformation.Email_Address)" Caption="Teacher Email Address"></DxDataGridColumn>
                    </DxDataGrid>

                    <div style="margin-top: 33px; margin-left: 10px;">

                        <DxButton RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Load Graduate Course" SizeMode="SizeMode.Small" Enabled="@enableOrDisableLoadGraduateCourseButton" Click="@loadGraduateCourseQualifications" />
                    </div>
                </div>
                <br />

                @*Aim:Search box for graduate course*@
                @if (enableGraduateCourseGridLayout)
                {
                    <div class=" dxgridlayoutitem_style">
                        <center><h5>Select Graduate Course</h5></center>

                        <div>
                            <DxTextBox NullText="Search Graduate Courses" SizeMode="SizeMode.Small" TextChanged="@((searchGraduateCourseKeyword) => onChangeGradauteCourseSearchText(searchGraduateCourseKeyword))"> </DxTextBox>


                            <div style="margin-top: 33px; margin-left: 10px;">

                                <DxButton RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Search Graduate Course" SizeMode="SizeMode.Small" Enabled="@enableOrDisableSearchGraduateCourseButton" Click="@getGraduateCourseOnSearch" />
                            </div>
                        </div>
                        <br />
                        <DxDataGrid Data="@graduateCourseList"
                                    @ref="@graduateCourseGrid"
                                    KeyFieldName="@nameof(GraduateCourse.GraduateCourseId)"
                                    @bind-SingleSelectedDataRow="@onselectofgraduatecourse"
                                    CssClass="datagrid-border-radius-top-0 mw-1100">
                            <DxDataGridSelectionColumn></DxDataGridSelectionColumn>
                            <DxDataGridColumn Field="@nameof(GraduateCourse.GraduateCourseName)" Caption="Graduate Course"></DxDataGridColumn>


                        </DxDataGrid>

                        <DxButton RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Add Graduate Course" SizeMode="SizeMode.Small" Click="@AddGraduateCourses" />

                    </div>
                }
                <br />

            </Template>
        </DxGridLayoutItem>
        @if (enableGraduateCourseGridLayout)
        {
            <DxGridLayoutItem Row="1" Column="1">
                <Template>


                    <DxDataGrid Data="@teacherGraduateCourseQualificationList"
                                SelectionMode="DataGridSelectionMode.MultipleSelectedDataRows"
                                @bind-MultipleSelectedDataRows="@onSelectOfTeacherGraduateCourseQualification">
                        <DxDataGridSelectionColumn></DxDataGridSelectionColumn>

                        <DxDataGridColumn Field="@nameof(TeacherGraduateCourse_Qualification.TeacherId)" Caption="Graduate Course"></DxDataGridColumn>
                        <DxDataGridColumn Field="@nameof(TeacherGraduateCourse_Qualification.GraduateCourseId)" Caption="Graduate Course"></DxDataGridColumn>

                    </DxDataGrid>

                    <DxButton RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Remove Graduate Course" SizeMode="SizeMode.Small" Click="@RemoveGraduateCourse" />
                </Template>
            </DxGridLayoutItem>
        }
    </Items>
</DxGridLayout>

@code{
    DxDataGrid<TeacherBasicInformation> teacherGrid;
    DxDataGrid<GraduateCourse> graduateCourseGrid;


    DxDataGrid<TeacherGraduateCourse_Qualification> teacherGraduateCourseQualificationGrid;

    //Aim : Used to capture the keyword entered by the user
    public string searchTeacherKeyword;

    //Aim : To hold the details of the teacher selected by the user
    TeacherBasicInformation selectedTeacherDetails;

    //Aim : To enable or disable teacher search button
    public bool enableOrDisableSearchTeacherButton = false;

    //Aim : To enable or disable graduate course search button
    public bool enableOrDisableLoadGraduateCourseButton = false;


    public bool enableGraduateCourseGridLayout = false;

    //Aim : Used to capture the keyword entered by the user
    public bool enableOrDisableSearchGraduateCourseButton = false;

    public bool enableTeacherGraduateCourseQualificationGridLayout = false;

    //Aim : Used to capture the keyword entered by the user
    public string searchGraduateCourseKeyword;

    public int selectedTeacherId;

    public GraduateCourse selectedGraduateCourseList;

    public int selectedGraduateId;

    int SelectedCount { get; set; }

    int StoredSelectedCount { get; set; }

    int StoredUnselectedCount { get; set; }

    //Aim : To hold the list of teachers /single record of teachers details of type TeacherBasicInformation to display in the data grid.
    IEnumerable<TeacherBasicInformation> teacherDetailsList = Enumerable.Empty<TeacherBasicInformation>();

    //Aim : To hold the list of teachers /single record of GraduateCourse details of type GraduateCourse to display in the data grid.
    IEnumerable<GraduateCourse> graduateCourseList = Enumerable.Empty<GraduateCourse>();

    //Aim : To hold the list of teachers /single record of TeacherGraduateCourse_Qualification details of type TeacherGraduateCourse_Qualification to display in the data grid.
    IEnumerable<TeacherGraduateCourse_Qualification> teacherGraduateCourseQualificationList = new List<TeacherGraduateCourse_Qualification>();

    IEnumerable<TeacherGraduateCourse_Qualification> selectedTeacherGraduateCourseQualifications;

    //Aim : To determine if the user has entered any data in the search text box and to enable or disable the teacher search button
    public void onChangeTeacherSearchText(string searchTeacherText)
    {
        searchTeacherKeyword = searchTeacherText;

        enableOrDisableSearchTeacherButton = true;
        Console.WriteLine(enableOrDisableSearchTeacherButton);
    }

    //Aim: To fetch teacher/teachers details on click of teacher search button :
    //IViewTeacherBasicInformationUseCase is used for fetching the teacher basic information list for the searched key.
    public void getTeacherListOnSearch()
    {
        teacherDetailsList = diIViewTeacherBasicInformationUseCase.ViewTeacherBasicInformationList(searchTeacherKeyword);

    }

    //Aim : To call getTeacherGraduateCourseQualifications method and to enable the "Load Graduate Course" button.
    public TeacherBasicInformation onSelectOfTeacher
    {
        get { return selectedTeacherDetails; }
        set
        {
            selectedTeacherDetails = value;
            Console.WriteLine(selectedTeacherDetails);
            selectedTeacherId = selectedTeacherDetails.TeacherId;

            enableOrDisableLoadGraduateCourseButton = true;
            Console.WriteLine(enableOrDisableLoadGraduateCourseButton);
            InvokeAsync(StateHasChanged);
        }
    }

    //Aim: 
    //1.to enable the graduate course grid.
    //2.to enable the teacher graduate course qualification grid.
    //3.to invoke the method "getTeacherGraduateCourseQualifications"

    public void loadGraduateCourseQualifications()
    {
        enableGraduateCourseGridLayout = true;
        Console.WriteLine(enableGraduateCourseGridLayout);
        enableTeacherGraduateCourseQualificationGridLayout = true;
        getTeacherGraduateCourseQualifications();
    }

    //Aim : To determine if the user has entered any data in the graduate course search text box and to enable or disable the graduate course search button

    public void onChangeGradauteCourseSearchText(string searchGraduateCourseText)
    {
        searchGraduateCourseKeyword = searchGraduateCourseText;
        enableOrDisableSearchGraduateCourseButton = true;
        Console.WriteLine(enableOrDisableSearchGraduateCourseButton);
    }

    //Aim: 
    //1.To fetch  graduate courses(which is matched with the searched criteria) on click of graduate course search button : 
    // IViewGraduateCourseUseCase is used for fetching the graduate course list for the searched key.
    //2.To invoke a method "getAvailableGraduateCourses" for obtaining only the courses that are not already associated with the teacher and display the list.

    public void getGraduateCourseOnSearch()
    {
        graduateCourseList = diIViewGraduateCourseUseCase.ViewGraduateCourse(searchGraduateCourseKeyword);

        Console.WriteLine(graduateCourseList);
    }

    //Aim : To capture the selected graduate course value and to enable the "Add Graduate Course" button.
    public GraduateCourse onselectofgraduatecourse
    {
        get { return selectedGraduateCourseList; }
        set
        {
            // Console.WriteLine(selectedGraduateCourseList);
            selectedGraduateCourseList = value;
            Console.WriteLine(selectedGraduateCourseList.GraduateCourseId);
            selectedGraduateId = selectedGraduateCourseList.GraduateCourseId;
            Console.WriteLine(selectedGraduateId);

            InvokeAsync(StateHasChanged);
        }

    }

    //Aim : To fetch teacher graduate course qualifications from TeacherGraduateCourseQualification table for the selected teacher.

    public void getTeacherGraduateCourseQualifications()
    {
        Console.WriteLine(selectedTeacherId);
        teacherGraduateCourseQualificationList = diIViewTeacherGraduateCourseQualificationUseCase.ViewTeacherGraduateCourseQualification(selectedTeacherId);
        Console.WriteLine(teacherGraduateCourseQualificationList);

    }

    //Aim: To save the teacher graduate course qualification record on click of save button.

    public void AddGraduateCourses()
    {
        var addGraduateCourse = diICreateTeacherGraduateCourseQualificationUseCase.CreateTeacherGraduateCourseQualification(selectedTeacherId, selectedGraduateId);
        Console.WriteLine(addGraduateCourse);
    }

    //Aim : To capture the selected teacher graduate course qualification value and to enable the "Remove Graduate Course" button. 
    IEnumerable<TeacherGraduateCourse_Qualification> onSelectOfTeacherGraduateCourseQualification
    {
        get { return selectedTeacherGraduateCourseQualifications; }
        set
        {
            selectedTeacherGraduateCourseQualifications = value;
            Console.WriteLine(selectedTeacherGraduateCourseQualifications);
            InvokeAsync(StateHasChanged);
        }
    }

    //Aim: To remove the teacher graduate course qualification record on click of "Remove Graduate Course" button.
    public void RemoveGraduateCourse()
    {
        List<TeacherGraduateCourse_Qualification> List = selectedTeacherGraduateCourseQualifications.ToList();
        var removeGraduateCourse = diIEditGraduateCourseQualificationUseCase.EditGraduateCourseQualification(List);
        Console.WriteLine(removeGraduateCourse);
    }
}




