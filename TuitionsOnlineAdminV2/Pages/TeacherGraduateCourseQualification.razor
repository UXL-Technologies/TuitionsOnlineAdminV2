
@page "/TeacherGraduateCourseQualification"
@*Authors : SA,BM,KK,SM,BA
    Date:19/02/2021
    Aim: To create a serach box and to display the list of teachers  *@

@*Aim:Referring usecase of TeacherBasicInformation *@

@using TuitionsOnlineAdmin.UseCases.TeacherBasicInformations.ViewTeacherBasicInformationScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.TeacherGraduateCourse_Qualification.ViewTeacherGraduateCourseQualificationScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.GraduateCourses.ViewGraduateCourseScreen.Interfaces
@inject IViewTeacherBasicInformationUseCase diIViewTeacherBasicInformationUseCase;
@inject IViewTeacherGraduateCourseQualificationUseCase diIViewTeacherGraduateCourseQualificationUseCase;
@inject IViewGraduateCourseUseCase diIViewGraduateCourseUseCase;




<DxGridLayout CssClass="mw-1100 dxgridlayout_style" style=" height: auto; margin-bottom: 10px;">
    <Rows>
        <DxGridLayoutRow Height="auto" />
    </Rows>
    <Columns>
        <DxGridLayoutColumn Width="50%" />
        <DxGridLayoutColumn Width="50%" />
    </Columns>
    <Items>
        <DxGridLayoutItem Row="0" Column="0">
            <Template>
                <div class=" dxgridlayoutitem_style">
                    <center><h5>Select Teacher Name</h5></center>

                    <div>

                        <DxTextBox NullText="Search Teachers" SizeMode="SizeMode.Small" ColSpanMd="6" TextChanged="@((searchTeacherKeyword) => onChangeTeacherSearchText(searchTeacherKeyword))"> </DxTextBox>


                        @*<div style="margin-top: 33px; margin-left: 10px;">*@

                        <DxButton RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Search Teacher" SizeMode="SizeMode.Small" ColSpanMd="6" Enabled="@enableOrDisableSearchTeacherButton" Click="@getTeacherListOnSearch" />
                    </div>
                    <br />



                    <DxDataGrid Data="@teacherDetailsList"
                                @bind-SingleSelectedDataRow="@onSelectOfTeacher"
                                CssClass="mw-1100">
                        <DxDataGridSelectionColumn Width="50px"></DxDataGridSelectionColumn>
                        <DxDataGridColumn Field="@nameof(TeacherBasicInformation.Teacher_Name)" Caption="Teacher Name"></DxDataGridColumn>
                        <DxDataGridColumn Field="@nameof(TeacherBasicInformation.Email_Address)" Caption="Teacher Email Address"></DxDataGridColumn>
                    </DxDataGrid>

                    <div style="margin-top: 33px; margin-left: 10px;">

                        <DxButton RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Load Graduate Course" SizeMode="SizeMode.Small" Enabled="@enableOrDisableLoadGraduateCourseButton" Click="@loadGraduateCourseQualifications" />
                    </div>
                </div>
                <br />



                @*Aim:Search box for graduate course*@
                @if (enableGraduateCourseGridLayout)
                {
            <div class=" dxgridlayoutitem_style">
                <center><h5>Select Graduate Course</h5></center>

                <div>
                    <DxTextBox NullText="Search Graduate Courses" SizeMode="SizeMode.Small" TextChanged="@((searchGraduateCourseKeyword) => onChangeGradauteCourseSearchText(searchGraduateCourseKeyword))"> </DxTextBox>


                    <div style="margin-top: 33px; margin-left: 10px;">

                        <DxButton RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Search Graduate Course" SizeMode="SizeMode.Small" Enabled="@enableOrDisableSearchGraduateCourseButton" Click="@getGraduateCourseOnSearch" />
                    </div>
                </div>
                <br />
                <DxDataGrid Data="@graduateCourseList"
                            @ref="@graduateCourseGrid"
                            KeyFieldName="@nameof(GraduateCourse.GraduateCourseId)"
                            SelectionMode="DataGridSelectionMode.OptimizedMultipleSelection"
                            SelectAllMode="DataGridSelectAllMode.AllPages"
                            OptimizedMultipleSelectionChanged="onSelectOfGraduateCourse"
                            CssClass="datagrid-border-radius-top-0 mw-1100">
                    <DxDataGridSelectionColumn></DxDataGridSelectionColumn>
                    <DxDataGridColumn Field="@nameof(GraduateCourse.GraduateCourseName)" Caption="Graduate Course"></DxDataGridColumn>




                </DxDataGrid>
            </div>
                }
                    <br />






            </Template>
        </DxGridLayoutItem>

        @*<DxGridLayoutItem Row="1" Column="1">
            <Template>
                <DxListBox Data="@Staff.DataSource"
                           @bind-Values="@Values"
                           style=" height: 426px; margin-top: 10px;">
                    <DxListEditorColumn FieldName="Id" Width="50px" />
                    <DxListEditorColumn FieldName="TeacherName" Caption="Teacher Name" />
                    <DxListEditorColumn FieldName="selectedGraduateCourse" Caption="Graduate Course" />
                </DxListBox>
           
            </Template>
        </DxGridLayoutItem>*@

    </Items>
</DxGridLayout>

@code{
    DxDataGrid<TeacherBasicInformation> teacherGrid;
    DxDataGrid<GraduateCourse> graduateCourseGrid;

    //Aim : Used to capture the keyword entered by the user
    public string searchTeacherKeyword;

    //Aim : To hold the details of the teacher selected by the user
    TeacherBasicInformation selectedTeacherDetails;

    //Aim : To enable or disable teacher search button
    public bool enableOrDisableSearchTeacherButton = false;

    //Aim : To enable or disable graduate course search button
    public bool enableOrDisableLoadGraduateCourseButton = false;

    public bool enableGraduateCourseGridLayout = false;

    public bool enableOrDisableSearchGraduateCourseButton = false;

    public bool enableTeacherGraduateCourseQualificationGridLayout =false;

    public string searchGraduateCourseKeyword;




    public int selectedTeacherId;

    //testing
    int SelectedCount { get; set; }
    int StoredSelectedCount { get; set; }
    int StoredUnselectedCount { get; set; }

    //Aim : To hold the list of teachers /single record of teachers details of type TeacherBasicInformation to display in the data grid.
    IEnumerable<TeacherBasicInformation> teacherDetailsList = Enumerable.Empty<TeacherBasicInformation>();

    IEnumerable<GraduateCourse> graduateCourseList = Enumerable.Empty<GraduateCourse>();

    IEnumerable<TeacherGraduateCourseQualification> teacherGraduateCourseQualificationList = new List<TeacherGraduateCourseQualification>();


    //Aim : To determine if the user has entered any data in the search text box and to enable or disable the teacher search button
    public void onChangeTeacherSearchText(string searchTeacherText)
    {
        searchTeacherKeyword = searchTeacherText;

        enableOrDisableSearchTeacherButton = true;
        Console.WriteLine(enableOrDisableSearchTeacherButton);
    }

    //Aim: To fetch teacher/teachers details on click of teacher search button :
    //IViewTeacherBasicInformationUseCase is used for fetching the teacher basic information list for the searched key.
    public void getTeacherListOnSearch()
    {
        teacherDetailsList = diIViewTeacherBasicInformationUseCase.ViewTeacherBasicInformationList(searchTeacherKeyword);

    }

    //Aim : To call getTeacherGraduateCourseQualifications method and to enable the "Load Graduate Course" button.
    public TeacherBasicInformation onSelectOfTeacher
    {
        get { return selectedTeacherDetails; }
        set
        {
            selectedTeacherDetails = value;
            Console.WriteLine(selectedTeacherDetails);
            selectedTeacherId = selectedTeacherDetails.TeacherId;

            enableOrDisableLoadGraduateCourseButton = true;
            Console.WriteLine(enableOrDisableLoadGraduateCourseButton);
            InvokeAsync(StateHasChanged);
        }
    }

    public void loadGraduateCourseQualifications()
    {
        enableGraduateCourseGridLayout = true;
        Console.WriteLine(enableGraduateCourseGridLayout);
        enableTeacherGraduateCourseQualificationGridLayout = true;
        getTeacherGraduateCourseQualifications();
    }

    public void onChangeGradauteCourseSearchText(string searchGraduateCourseText)
    {
        searchGraduateCourseKeyword = searchGraduateCourseText;
        enableOrDisableSearchGraduateCourseButton = true;
        Console.WriteLine(enableOrDisableSearchGraduateCourseButton);
    }

    public void getGraduateCourseOnSearch()
    {
        graduateCourseList = diIViewGraduateCourseUseCase.ViewGraduateCourse(searchGraduateCourseKeyword);

        Console.WriteLine(graduateCourseList);
    }

    protected async Task onSelectOfGraduateCourse(DataGridSelection<GraduateCourse> selection)
    {
        Console.WriteLine(selection);

    }

    public void getTeacherGraduateCourseQualifications()
    {
        Console.WriteLine(selectedTeacherId);
        var teacherGraduateCourseQualificationList = diIViewTeacherGraduateCourseQualificationUseCase.ViewTeacherGraduateCourseQualification(selectedTeacherId);
       // teacherGraduateCourseQualificationList = teacherGraduateCourseQualificationList.ToList();
        Console.WriteLine(teacherGraduateCourseQualificationList);

    }
}



