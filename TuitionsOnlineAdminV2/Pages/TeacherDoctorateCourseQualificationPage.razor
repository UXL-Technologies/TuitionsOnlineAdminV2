@page "/TeacherDoctorateCourseQualification"
@*Authors: Shravan A, Bhavya MU, Sneha M , Karan Kumar , Bhargavi S Adiga
    Date:19/02/2021
    Aim: To create a serach box and to display the list of teacher  *@

@using TuitionsOnlineAdmin.UseCases.TeacherBasicInformations.ViewTeacherBasicInformationScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.DoctorateCourses.ViewDoctorateCourseScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.TeacherDoctorateCourse_Qualifications.ViewTeacherDoctorateCourseQualificationScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.TeacherDoctorateCourse_Qualifications.CreateTeacherDoctorateCourseQualificationScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.TeacherDoctorateCourse_Qualifications.EditTeacherDoctorateCourseQualificationScreen.Interfaces
@using TuitionsOnlineAdmin.CoreBusiness

@inject IViewTeacherBasicInformationUseCase diIViewTeacherBasicInformationUseCase
@inject IViewDoctorateCourseUseCase diIViewDoctorateCourseUseCase
@inject IViewTeacherDoctorateCourseQualificationUseCase diIViewTeacherDoctorateCourseQualificationUseCase
@inject ICreateTeacherDoctorateCourseQualificationUseCase diICreateTeacherDoctorateCourseQualificationUseCase
@inject IEditTeacherDoctorateCourseQualificationUseCase diIEditTeacherDoctorateCourseQualificationUseCase
@inject BusinessMessage instanceOfBusinessMessage


<div>

    @* To display the success message on click of save when new doctorate course is created *@
    @if (createMessage && resultForCreate == "done")
    {
        <p class="success_message_style">
            Your doctorate course has been added successfully !
        </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForCreate
        </p>
    }
</div>

<div>

    @* To display the success message on click of save when doctorate course is updated *@
    @if (updateMessage && resultForUpdate == "done")
    {
        <p class="success_message_style">
            Your doctorate course has been removed successfully !
        </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForUpdate
        </p>
    }
</div>

<div>

    @* To display server error message *@
    @if (viewError && @doctorateCourseList == null)
    {
        <p class="success_message_style">
            @instanceOfBusinessMessage.UNKNOWN_SERVER_ERROR_VIEW_TEACHERDOCTORATECOURSE_QUALIFICATIONS
        </p>
    }
</div>


<DxGridLayout CssClass="mw-1100 dxgridlayout_style" style=" height: auto; margin-bottom: 10px;">
    <Rows>
        <DxGridLayoutRow Height="auto" />
    </Rows>
    <Columns>
        <DxGridLayoutColumn Width="50%" />
        <DxGridLayoutColumn Width="50%" />
    </Columns>
    <Items>
        <DxGridLayoutItem Row="0" Column="0">
            <Template>
                <div class=" dxgridlayoutitem_style">
                    <center><h5>Select Teacher Name</h5></center>

                    <div>

                        <DxTextBox NullText="Search Teachers" SizeMode="SizeMode.Small" style=" width:550px;" TextChanged="@((searchTeacherKeyword) => onChangeTeacherSearchText(searchTeacherKeyword))"> </DxTextBox>


                        <div class="teachersearchbutton_style">

                            <DxButton RenderStyle="ButtonRenderStyle.Primary" CssClass="buttonsize_style" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Search Teacher" SizeMode="SizeMode.Small" Enabled="@enableOrDisableSearchTeacherButton" Click="@getTeacherListOnSearch" />
                        </div>
                    </div>
                    <br />
                    @if (enableSearchTeacherButton)
                    {
                        <DxDataGrid Data="@teacherDetailsList"
                                    @bind-SingleSelectedDataRow="@onSelectOfTeacher"
                                    CssClass="mw-1100">
                            <DxDataGridSelectionColumn Width="50px"></DxDataGridSelectionColumn>
                            <DxDataGridColumn Field="@nameof(TeacherBasicInformation.Teacher_Name)" Caption="Teacher Name"></DxDataGridColumn>
                            <DxDataGridColumn Field="@nameof(TeacherBasicInformation.Email_Address)" Caption="Teacher Email Address"></DxDataGridColumn>
                        </DxDataGrid>

                        <div class="loadbutton_style">

                            <DxButton RenderStyle="ButtonRenderStyle.Primary" CssClass="buttonsize_style" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Load Doctorate Course" SizeMode="SizeMode.Small" Enabled="@enableOrDisableLoadDoctorateCourseButton" Click="@loadDoctorateCourseQualifications" />
                        </div>
                    }
                </div>

                <br />

                @*Aim:Search box for Doctorate course*@
                @if (enableDoctorateCourseGridLayout)
                {
                    <div class=" dxgridlayoutitem_style">
                        <center><h5>Select Doctorate Course</h5></center>

                        <div>
                            <DxTextBox NullText="Search Doctorate Courses" SizeMode="SizeMode.Small" style=" width:550px;" TextChanged="@((searchDoctorateCourseKeyword) => onChangeDoctorateCourseSearchText(searchDoctorateCourseKeyword))"> </DxTextBox>


                            <div class="coursesearchbutton_style">

                                <DxButton RenderStyle="ButtonRenderStyle.Primary" CssClass="buttonsize_style" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Search Doctorate Course" SizeMode="SizeMode.Small" Enabled="@enableOrDisableSearchDoctorateCourseButton" Click="@getDoctorateCourseOnSearch" />
                            </div>
                        </div>
                        <br />
                        @if (enableSearchDoctorateCourseButton)
                        {
                            <DxDataGrid Data="@doctorateCourseList"
                                        @ref="@doctorateCourseGrid"
                                        KeyFieldName="@nameof(DoctorateCourse.DoctorateCourseId)"
                                        @bind-SingleSelectedDataRow="@onselectofdoctoratecourse"
                                        CssClass="datagrid-border-radius-top-0 mw-1100">
                                <DxDataGridSelectionColumn></DxDataGridSelectionColumn>
                                <DxDataGridColumn Field="@nameof(DoctorateCourse.DoctorateCourseName)" Caption="Doctorate Course"></DxDataGridColumn>


                            </DxDataGrid>
                            <div class="loadbutton_style">
                                <DxButton RenderStyle="ButtonRenderStyle.Primary" CssClass="buttonsize_style" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Add Doctorate Course" SizeMode="SizeMode.Small" Click="@AddDoctorateCourses" />
                            </div>
                        }
                    </div>
                }
                <br />

            </Template>
        </DxGridLayoutItem>
        @if (enableDoctorateCourseGridLayout)
        {
            <DxGridLayoutItem Row="1" Column="1">
                <Template>


                    <DxDataGrid Data="@teacherDoctorateCourseQualificationList"
                                SelectionMode="DataGridSelectionMode.MultipleSelectedDataRows"
                                @bind-MultipleSelectedDataRows="@onSelectOfTeacherDoctorateCourseQualification">
                        <DxDataGridSelectionColumn></DxDataGridSelectionColumn>

                        <DxDataGridColumn Field="@nameof(TeacherDoctorateCourse_QualificationWithForeignKeys.TeacherName)" Caption="Teacher Name"></DxDataGridColumn>
                        <DxDataGridColumn Field="@nameof(TeacherDoctorateCourse_QualificationWithForeignKeys.DoctorateCourseName)" Caption="Doctorate Course Name"></DxDataGridColumn>

                    </DxDataGrid>
                    <div class="loadbutton_style">
                        <DxButton RenderStyle="ButtonRenderStyle.Primary" CssClass="buttonsize_style" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Remove Doctorate Course" SizeMode="SizeMode.Small" Click="@RemoveDoctorateCourse" />
                    </div>
                </Template>
            </DxGridLayoutItem>
        }
    </Items>
</DxGridLayout>

@code {
    //Variable to hold the success message on create of Graduate Course
    public string resultForCreate;

    //Variable to hold the success message on update of Graduate Course
    public string resultForUpdate;

    //Boolean variable to display the message on create of Graduate Course
    bool createMessage = false;

    //Boolean variable to display the error message if the user is unable to view the data
    bool viewError = false;

    //Boolean variable to display the message on update of Graduate Course
    bool updateMessage = false;


    DxDataGrid<TeacherBasicInformation> teacherGrid;
    DxDataGrid<DoctorateCourse> doctorateCourseGrid;
    DxDataGrid<TeacherDoctorateCourse_Qualification> teacherDoctorateCourseQualificationGrid;

    //Aim : Used to capture the keyword entered by the user
    public string searchTeacherKeyword = null;

    //Aim : To hold the details of the teacher selected by the user
    TeacherBasicInformation selectedTeacherDetails;

    //Aim : To enable or disable teacher search button
    public bool enableOrDisableSearchTeacherButton = false;

    //Aim : To enable or disable Doctorate course search button
    public bool enableOrDisableLoadDoctorateCourseButton = false;

    public bool enableDoctorateCourseGridLayout = false;

    //Aim : Used to capture the keyword entered by the user
    public bool enableOrDisableSearchDoctorateCourseButton = false;

    //Aim:To enable Search Teacher table
    public bool enableSearchTeacherButton = false;

    //Aim:To enable search Doctorate course table
    public bool enableSearchDoctorateCourseButton = false;

    public bool enableTeacherDoctorateCourseQualificationGridLayout = false;

    //Aim : Used to capture the keyword entered by the user
    public string searchDoctorateCourseKeyword;

    public int selectedTeacherId;

    public DoctorateCourse selectedDoctorateCourseList;

    public int selectedDoctorateId;

    int SelectedCount { get; set; }

    int StoredSelectedCount { get; set; }

    int StoredUnselectedCount { get; set; }

    //Aim : To hold the list of teachers /single record of teachers details of type TeacherBasicInformation to display in the data grid.
    IEnumerable<TeacherBasicInformation> teacherDetailsList = Enumerable.Empty<TeacherBasicInformation>();

    //Aim : To hold the list of teachers /single record of DoctorateCourse details of type DoctorateCourse to display in the data grid.
    IEnumerable<DoctorateCourse> doctorateCourseList = Enumerable.Empty<DoctorateCourse>();

    //Aim : To hold the list of teachers /single record of TeacherDoctorateCourse_Qualification details of type TeacherDoctorateCourse_Qualification to display in the data grid.
    IEnumerable<TeacherDoctorateCourse_QualificationWithForeignKeys> teacherDoctorateCourseQualificationList = new List<TeacherDoctorateCourse_QualificationWithForeignKeys>();

    IEnumerable<TeacherDoctorateCourse_QualificationWithForeignKeys> selectedTeacherDoctorateCourseQualifications;

    //Aim : To determine if the user has entered any data in the search text box and to enable or disable the teacher search button

    public void onChangeTeacherSearchText(string searchTeacherText)
    {
        searchTeacherKeyword = searchTeacherText;
        enableOrDisableSearchTeacherButton = true;

    }

    //Aim: To fetch teacher/teachers details on click of teacher search button :
    //IViewTeacherBasicInformationUseCase is used for fetching the teacher basic information list for the searched key.

    public void getTeacherListOnSearch()
    {

        teacherDetailsList = diIViewTeacherBasicInformationUseCase.ViewTeacherBasicInformationList(searchTeacherKeyword);

        enableSearchTeacherButton = true;
    }

    //Aim : To call getTeacherDoctorateCourseQualifications method and to enable the "Load Doctorate Course" button.

    public TeacherBasicInformation onSelectOfTeacher
    {
        get { return selectedTeacherDetails; }
        set
        {
            selectedTeacherDetails = value;

            selectedTeacherId = selectedTeacherDetails.TeacherId;
            enableOrDisableLoadDoctorateCourseButton = true;

            InvokeAsync(StateHasChanged);
        }
    }

    //Aim:
    //1.to enable the Doctorate course grid.
    //2.to enable the teacher Doctorate course qualification grid.
    //3.to invoke the method "getTeacherDoctorateCourseQualifications"

    public void loadDoctorateCourseQualifications()
    {
        enableDoctorateCourseGridLayout = true;

        enableTeacherDoctorateCourseQualificationGridLayout = true;
        getTeacherDoctorateCourseQualifications();
    }

    //Aim : To determine if the user has entered any data in the Doctorate course search text box and to enable or disable the Doctorate course search button

    public void onChangeDoctorateCourseSearchText(string searchDoctorateCourseText)
    {
        searchDoctorateCourseKeyword = searchDoctorateCourseText;
        enableOrDisableSearchDoctorateCourseButton = true;

    }

    //Aim:
    //1.To fetch  Doctorate courses(which is matched with the searched criteria) on click of Doctorate course search button :
    // IViewDoctorateCourseUseCase is used for fetching the Doctorate course list for the searched key.
    //2.To invoke a method "getAvailableDoctorateCourses" for obtaining only the courses that are not already associated with the teacher and display the list.

    public void getDoctorateCourseOnSearch()
    {
        doctorateCourseList = diIViewDoctorateCourseUseCase.ViewDoctorateCourse(searchDoctorateCourseKeyword);
        enableSearchDoctorateCourseButton = true;

    }

    //Aim : To capture the selected Doctorate course value and to enable the "Add Doctorate Course" button.
    public DoctorateCourse onselectofdoctoratecourse
    {
        get { return selectedDoctorateCourseList; }
        set
        {
            
            selectedDoctorateCourseList = value;

            selectedDoctorateId = selectedDoctorateCourseList.DoctorateCourseId;

            InvokeAsync(StateHasChanged);
        }
    }

    //Aim : To fetch teacher Doctorate course qualifications from TeacherDoctorateCourseQualification table for the selected teacher.

    public void getTeacherDoctorateCourseQualifications()
    {

        teacherDoctorateCourseQualificationList = diIViewTeacherDoctorateCourseQualificationUseCase.ViewTeacherDoctorateCourseQualification(selectedTeacherId);

        teacherDoctorateCourseQualificationList = diIViewTeacherDoctorateCourseQualificationUseCase.ViewTeacherDoctorateCourseQualification(selectedTeacherId);
    }

    //Aim: To save the teacher Doctorate course qualification record on click of save button.

    public void AddDoctorateCourses()
    {


        resultForCreate = diICreateTeacherDoctorateCourseQualificationUseCase.CreateTeacherDoctorateCourseQualification(selectedTeacherId, selectedDoctorateId);
        createMessage = true;
        getTeacherDoctorateCourseQualifications();
    }

    //Aim : To capture the selected teacher Doctorate course qualification value and to enable the "Remove Doctorate Course" button.

    IEnumerable<TeacherDoctorateCourse_QualificationWithForeignKeys> onSelectOfTeacherDoctorateCourseQualification
    {
        get { return selectedTeacherDoctorateCourseQualifications; }
        set
        {
            selectedTeacherDoctorateCourseQualifications = value;

            InvokeAsync(StateHasChanged);
        }
    }

    //Aim: To remove the teacher Doctorate course qualification record on click of "Remove Doctorate Course" button.

    public void RemoveDoctorateCourse()
    {
        List<TeacherDoctorateCourse_QualificationWithForeignKeys> List = selectedTeacherDoctorateCourseQualifications.ToList();
        resultForUpdate = diIEditTeacherDoctorateCourseQualificationUseCase.EditTeacherDoctorateCourseQualification(List);
        updateMessage = true;
        getTeacherDoctorateCourseQualifications();
    }

}
