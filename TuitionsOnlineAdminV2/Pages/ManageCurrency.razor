@* Authors: Shravan A, Bhavya MU, Sneha M , Karan Kumar , Bhargavi S Adiga
     Date: 15-01-2021
    Aim : To create, view ,edit Currency *@

@page "/currency"
@using TuitionsOnlineAdmin.UseCases.Currencies.CreateCurrencyScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.Currencies.ViewCurrencyScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.Currencies.UpdateCurrencyScreen.Interface
@using TuitionsOnlineAdmin.CoreBusiness
@inject NavigationManager UriHelper
@inject ICreateCurrencyUseCase instanceOfICreateCurrencyUseCase
@inject IViewCurrencyUseCase instanceOfIViewCurrencyUseCase
@inject IUpdateCurrencyUseCase instanceOfIUpdateCurrencyUseCase
@inject BusinessMessage instanceOfBusinessMessage
@* this TextBox is used to search the data  *@
<div>

    <DxTextBox TextChanged="@((searchText) => OnTextChanged(searchText))"
               ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
               SizeMode="SizeMode.Small"
               NullText="Search for Currencies ...."></DxTextBox>
</div>
<br />

<div>
    @* To display the success message on click of save when new Graduate Currency is created *@
    @if (createMessage && resultForCreate == "done")
    {
        <p class="success_message_style">
            Your Currency "@currencyName" has been created successfully !
        </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForCreate
        </p>
    }
</div>

@* To display the success message on click of save when Graduate Currency is updated *@
<div>
    @if (updateMessage && resultForUpdate == "done")
    {
        <p class="success_message_style">
            Your Currency "@currencyName" has been updated successfully !
        </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForUpdate
        </p>
    }
</div>

<div>
    @* To display server error message *@
    @if (viewError && currencyList == null)
    {
        <p class="success_message_style">
            @instanceOfBusinessMessage.UNKNOWN_SERVER_ERROR_VIEW_CURRENCY
        </p>
    }
</div>



@*Table is used to display the Currency data *@
<DxDataGrid Data="@currencyList"
            RowInserting="@((newCurrency) => CreateCurrency(newCurrency))"
            RowUpdating="@((currencyToBeUpdated, newValue) => UpdateCurrency(currencyToBeUpdated, newValue))"
            PageSize="5">
    <DxDataGridColumn Field="@nameof(Currency.CurrencyName)" Width="300px" Caption="Currency" />
    <DxDataGridCheckBoxColumn Field="@nameof(Currency.Active)" Width="200px" />
    <DxDataGridCheckBoxColumn Field="@nameof(Currency.Default)" Width="200px" />
    <DxDataGridCommandColumn Width="200px" DeleteButtonVisible="false" />
</DxDataGrid>

@code {

    @* To hold the hold the Currency details*@
    IEnumerable<Currency> currencyList = Enumerable.Empty<Currency>();

    @*To hold the search text*@
String searchkey;

//Variable to hold the success message on create of Currency
public string resultForCreate;

//Boolean variable to display the message on create of Currency
bool createMessage = false;

//Variable to hold the success message on update of Currency
public string resultForUpdate;

//Boolean variable to display the message on update of Currency
bool updateMessage = false;

//Boolean variable to display the error message if the user is unable to view the data
bool viewError = false;

//Variable to hold the Currency name
public string currencyName;

    @*The init method is to invoke the Currency list when the page is loaded*@
    protected override void OnInitialized()
    {

        @*To invoke the GetCurrencies() to fetch the Currency list to be displayed*@
        GetCurrencies(searchkey);

    }

    @*To get Currency list to be displayed in the data grid columns*@
public void GetCurrencies(String searchkeyword)
{
    currencyList = instanceOfIViewCurrencyUseCase.ViewCurrency(searchkeyword);
    viewError = true;
}

//Method to capture the user search result
void OnTextChanged(String searchText)
{
    Console.WriteLine(searchText);
    searchkey = searchText;
        @*To invoke the component to re-render the data*@

        InvokeAsync(StateHasChanged);

        @*The Currency list should be fetched again to diplay the newly created Currency along with the existing the Currency list *@
        GetCurrencies(searchkey);
    }

    //create Currency
    @*The CreateCurrency() method is responsible for capturing the details enetred by the user and send it to the database.*@
   private async void CreateCurrency(Dictionary<string, object> newCurrency)
    {
        @* To hold the new Currency to be created *@
        Currency createCurrency = new Currency();
        @*The new value comes in the form of key value pair*@
        foreach (var field in newCurrency.Keys)
        {
            @*For each incoming key we check and assign the values to newCurrency *@
            switch (field)
            {
                case "CurrencyName":
                    currencyName = createCurrency.CurrencyName = (string)newCurrency[field];
                    break;
                case "Active":
                    createCurrency.Active = (bool)newCurrency[field];
                    break;
                case "Default":
                    createCurrency.Default = (bool)newCurrency[field];
                    break;
            }
        }

        @*To invoke the method to create new Currency*@
        resultForCreate = instanceOfICreateCurrencyUseCase.CreateCurrency(createCurrency);
        createMessage = true;
        @*The StateHasChanged makes sure that the component is notified to re-render the data*@
       await InvokeAsync(StateHasChanged);
        @*The Currency list should be fetched again to display the newly created Currency along with the existing the Currency list *@
    GetCurrencies(searchkey);
    //Used to refresh the razor page
    await Task.Delay(2000);
    //Used to refresh the razor page
    UriHelper.NavigateTo("currency", forceLoad: true);

}
//To take and update the value for  Currency
private async void UpdateCurrency(Currency currencyToBeUpdated, Dictionary<string, object> newValue)
{

    foreach (var currency in newValue.Keys)
    {
        switch (currency)
        {
            case "CurrencyName":
                currencyName = currencyToBeUpdated.CurrencyName = (string)newValue[currency];
                break;
            case "Active":
                currencyToBeUpdated.Active = (bool)newValue[currency];
                break;
            case "Default":
                currencyToBeUpdated.Default = (bool)newValue[currency];
                break;
        }

    }

        @*CurrencyToBeUpdated this variable holds the updated value and is sent to the database*@
        resultForUpdate = instanceOfIUpdateCurrencyUseCase.UpdateCurrency(currencyToBeUpdated);
        updateMessage = true;
        @*The StateHasChanged makes sure that the component is notified to re-render the data*@
       await InvokeAsync(StateHasChanged);
        @*The Currency list should be fetched again to display the newly created Currency along with the existing the Currency list *@
    GetCurrencies(searchkey);

    //Used to refresh the razor page
    await Task.Delay(2000);
    //Used to refresh the razor page
    UriHelper.NavigateTo("currency", forceLoad: true);

}

}
