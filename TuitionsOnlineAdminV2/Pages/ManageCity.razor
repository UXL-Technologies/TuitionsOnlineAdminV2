@* Authors: Shravan A, Bhavya MU, Sneha M , Karan Kumar , Bhargavi S Adiga
    Date: 18-01-2021
     Aim : To create, view ,edit City *@

@page "/city"
@using TuitionsOnlineAdmin.UseCases.Cities.CreateCityScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.Cities.ViewCityScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.Cities.UpdateCityScreen.Interface
@using TuitionsOnlineAdmin.CoreBusiness

@inject NavigationManager UriHelper
@inject ICreateCityUseCase instanceOfICreateCityUseCase
@inject IViewCityUseCase instanceOfIViewCityUseCase
@inject IUpdateCityUseCase instanceOfIUpdateCityUseCase
@inject BusinessMessage instanceOfBusinessMessage

<div>
    @* this TextBox is used to search the data  *@
    <DxTextBox TextChanged="@((searchText) => OnTextChanged(searchText))"
               ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
               SizeMode="SizeMode.Small"
               NullText="Search for Cities ...."></DxTextBox>
</div>
<br />

<div>

    @* To display the success message on click of save when new City is created *@
    @if (createMessage && resultForCreate == "done")
    {
        <p class="success_message_style">
            Your city "@cityName" has been created successfully !
        </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForCreate
        </p>
    }
</div>

@* To display the success message on click of save when City is updated *@
<div>
    @if (updateMessage && resultForUpdate == "done")
    {
        <p class="success_message_style">
            Your city "@cityName" has been updated successfully !
        </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForUpdate
        </p>
    }
</div>

<div>
    @* To display server error message *@
    @if (viewError && cityList == null)
    {
        <p class="success_message_style">
            @instanceOfBusinessMessage.UNKNOWN_SERVER_ERROR_VIEW_CITY
        </p>
    }
</div>



@*Table is used to display the City data *@
<DxDataGrid Data="@cityList"
            RowInserting="@((newCity) => CreateCity(newCity))"
            RowUpdating="@((cityToBeUpdated, newValue) => UpdateCity(cityToBeUpdated, newValue))"
            PageSize="5">
    <DxDataGridColumn Field="@nameof(City.CityName)" Width="300px" Caption="City" />
    <DxDataGridCheckBoxColumn Field="@nameof(City.Active)" Width="200px" />
    <DxDataGridSpinEditColumn Field="@nameof(City.PinCode)" Width="200px" Caption="PinCode" TextAlignment="DataGridTextAlign.Left" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
    <DxDataGridCommandColumn Width="200px" DeleteButtonVisible="false" />
</DxDataGrid>

@code {

    @* To hold the City details*@
    IEnumerable<City> cityList = Enumerable.Empty<City>();

    @*To hold the search text*@
    String searchkey;

    //Variable to hold the success message on create of City
    public string resultForCreate;

    //Boolean variable to display the message on create of City
    bool createMessage = false;

    //Variable to hold the success message on update of City
    public string resultForUpdate;

    //Boolean variable to display the message on update of City
    bool updateMessage = false;

    //Boolean variable to display the error message if the user is unable to view the data
    bool viewError = false;

    //Variable to hold the City name
    public string cityName;

    @*The init method is to invoke the City list when the page is loaded*@
    protected override void OnInitialized()
    {

        @*To invoke the GetCities() to fetch the City list to be displayed*@
        GetCities(searchkey);

    }


    @*To get City list to be displayed in the data grid columns*@
    public void GetCities(String searchkeyword)
    {
        cityList = instanceOfIViewCityUseCase.ViewCity(searchkeyword);
        viewError = true;
    }


    //Method to capture the user search result
    void OnTextChanged(String searchText)
    {
        searchkey = searchText;
        @*The StateHasChanged makes sure that the component is notified to re-render the data*@

        InvokeAsync(StateHasChanged);

        @*The City list should be fetched again to display the newly created City along with the existing the City list *@
        GetCities(searchkey);
    }

    //create City
    @*The CreateCity() method is responsible for capturing the details enetred by the user and send it to the database.*@
    private async void CreateCity(Dictionary<string, object> newCity)
    {
        @* To hold the new City to be created *@
        City createCity = new City();
        @*The new value comes in the form of key value pair*@
        foreach (var field in newCity.Keys)
        {
            @*For each incoming key we check and assign the values to newCity *@
            switch (field)
            {
                case "CityName":
                    cityName = createCity.CityName = (string)newCity[field];
                    break;
                case "Active":
                    createCity.Active = (bool)newCity[field];
                    break;
                case "PinCode":
                    createCity.PinCode = (int)newCity[field];
                    break;
            }
        }

        @*To invoke the method to create new City*@
        resultForCreate = instanceOfICreateCityUseCase.CreateCity(createCity);

        createMessage = true;

        @*The StateHasChanged makes sure that the component is notified to re-render the data*@
        await InvokeAsync(StateHasChanged);

        @*The City list should be fetched again to display the newly created City along with the existing the City list *@
        GetCities(searchkey);

        //Used to refresh the razor page
        await Task.Delay(2000);
        //Used to refresh the razor page
        UriHelper.NavigateTo("city", forceLoad: true);
    }



    //To take and update the value for  City
    private async void UpdateCity(City cityToBeUpdated, Dictionary<string, object> newValue)
    {

        foreach (var city in newValue.Keys)
        {
            switch (city)
            {
                case "CityName":
                    cityName = cityToBeUpdated.CityName = (string)newValue[city];
                    Console.WriteLine(cityName);
                    break;
                case "Active":
                    cityToBeUpdated.Active = (bool)newValue[city];
                    break;
                case "PinCode":
                    cityToBeUpdated.PinCode = (int)newValue[city];
                    break;
            }

        }

        @*CityToBeUpdated this variable holds the updated value and is sent to the database*@
        resultForUpdate = instanceOfIUpdateCityUseCase.UpdateCity(cityToBeUpdated);
        updateMessage = true;

        @*The StateHasChanged makes sure that the component is notified to re-render the data*@
        await InvokeAsync(StateHasChanged);

        @*The City list should be fetched again to display the newly created City along with the existing the City list *@
        GetCities(searchkey);

        //Used to refresh the razor page
        await Task.Delay(2000);
        //Used to refresh the razor page
        UriHelper.NavigateTo("city", forceLoad: true);

    }

}
