@* Authors: Thanvi & Vanditha
    Date: 11-01-2021
    Aim : To create an graduate course,edit,deactivate and display the graduate courses*@



@page "/graduatecourse"
@using TuitionsOnlineAdmin.UseCases.GraduateCourses.CreateGraduateCourseScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.GraduateCourses.ViewGraduateCourseScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.GraduateCourses.UpdateGraduateCourseScreen.Interface
@using TuitionsOnlineAdmin.CoreBusiness
@inject NavigationManager UriHelper
@inject ICreateGraduateCourseUseCase  instanceOfICreateGraduateCourseUseCase
@inject IViewGraduateCourseUseCase  instanceOfIViewGraduateCourseUseCase
@inject IUpdateGraduateCourseUseCase instanceOfIUpdateGraduateCourseUseCase
@inject BusinessMessage instanceOfBusinessMessage


<div>

    @* this TextBox is used to search the data  *@
    <DxTextBox TextChanged="@((searchText) => OnTextChanged(searchText))"
               ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
               SizeMode="SizeMode.Small"
               NullText="Search for graduate courses ...."></DxTextBox>

</div>
<br />

<div>

    @* To display the success message on click of save *@
    @if (createMessage && resultForCreate == "done")
    {
        <p class="success_message_style">
            Your graduate course "@graduateCourseName" has been created successfully !
        </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForCreate
        </p>
    }
</div>

<div>

    @* To display the success message on click of save *@
    @if (viewErrorForUpdate && resultForUpdate == "done")
    {
    <p class="success_message_style">
        Your graduate course "@graduateCourseName" has been updated successfully !
    </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForUpdate
        </p>
    }
</div>

<div>

    @* To display the success message on click of save *@
    @if (viewError && @graduateCourseList == null)
    {
        <p class="success_message_style">
            @instanceOfBusinessMessage.UNKNOWN_SERVER_ERROR_VIEW_GRADUATECOURSE
        </p>
    }
</div>



@*Table is used to display the data *@
<DxDataGrid Data="@graduateCourseList"
            RowInserting="@((newCourse) => CreateGraduateCourse(newCourse))"
            RowUpdating="@((graduateCourseToBeUpdated, newValue) => UpdateGraduateCourse(graduateCourseToBeUpdated, newValue))"
            PageSize="5">
    <DxDataGridColumn Field="@nameof(GraduateCourse.GraduateCourseName)" Width="300px" />
    <DxDataGridCheckBoxColumn Field="@nameof(GraduateCourse.Active)" Width="200px" />
    <DxDataGridCommandColumn Width="200px" DeleteButtonVisible="false" />
</DxDataGrid>



@code {
    @* To hold the hold the Course details*@
    IEnumerable<GraduateCourse> graduateCourseList = Enumerable.Empty<GraduateCourse>();
    @*To hold the search text*@
String searchkey;

public string resultForCreate;
public string resultForUpdate;
public string graduateCourseName;


    bool createMessage = false;
bool viewError = false;
bool viewErrorForUpdate = false;


    @*The init method is to inoke the get graduate  course list*@
    protected override void OnInitialized()
    {

        @*To invoke the GetGraduateCourses() to fetch the graduate course list to be displayed*@
        GetGraduateCourses();

    }
    @*To get graduate course list to be displayed in the data grid columns*@
public void GetGraduateCourses()
{
    graduateCourseList = instanceOfIViewGraduateCourseUseCase.ViewGraduateCourse(searchkey);
    System.Diagnostics.Debug.WriteLine("Hello World");
    viewError = true;
}
void OnTextChanged(String searchText)
{
    Console.WriteLine(searchText);
    searchkey = searchText;
        @*The StateHasChanged makes sure that the component is notified to re - render the data*@

        InvokeAsync(StateHasChanged);

        @*The course list should be fetched again to diplay the newly created course along with the existing the course list *@
        GetGraduateCourses();
    }
    @*The OnRowInserting() method is responsible for capturing the details enetred by the user and save the data.*@
protected async Task CreateGraduateCourse(Dictionary<string, object> newCourse)
{
        @* To hold the new course to be created *@
        GraduateCourse createGraduateCourse = new GraduateCourse();
        @*The new value comes in the form of key value pair*@
        foreach (var field in newCourse.Keys)
        {
            @*For each incoming key we check and assign the values to newGraduateCourse *@
            switch (field)
            {
                case "GraduateCourseName":
                   graduateCourseName = createGraduateCourse.GraduateCourseName = (string)newCourse[field];
            Console.WriteLine(graduateCourseName);
                    break;
                case "Active":
                    createGraduateCourse.Active = (bool)newCourse[field];
                    break;
            }
        }
        Console.WriteLine(createGraduateCourse);
        @*To invoke the method to create new graduate course*@
resultForCreate= instanceOfICreateGraduateCourseUseCase.CreateGraduateCourse(createGraduateCourse);
Console.WriteLine(resultForCreate);

Console.WriteLine(createMessage);



        @*The StateHasChanged makes sure that the component is notified to re-render the data*@
var t = Task.Factory.StartNew(async () =>
{
    Console.WriteLine();
    createMessage = true;
    Console.WriteLine(createMessage);
    await Task.Delay(5000);
    createMessage = false;
    Console.WriteLine(createMessage);
});


//UriHelper.NavigateTo("graduatecourse", forceLoad: true);

InvokeAsync(StateHasChanged);

        @*The course list should be fetched again to diplay the newly created course along with the existing the course list *@
    GetGraduateCourses();



}

void UpdateGraduateCourse(GraduateCourse graduateCourseToBeUpdated, Dictionary<string, object> newValue)
{
    Console.WriteLine(graduateCourseToBeUpdated);
    Console.WriteLine(newValue);


    foreach (var course in newValue.Keys)
    {
        switch (course)
        {
            case "GraduateCourseName":
                graduateCourseName = graduateCourseToBeUpdated.GraduateCourseName = (string)newValue[course];
                break;
            case "Active":
                graduateCourseToBeUpdated.Active = (bool)newValue[course];
                break;
        }

    }

    Console.WriteLine(graduateCourseToBeUpdated);
    resultForUpdate = instanceOfIUpdateGraduateCourseUseCase.UpdateGraduateCourse(graduateCourseToBeUpdated);
    Console.WriteLine(resultForUpdate);
    viewErrorForUpdate = true;
    Console.WriteLine(viewErrorForUpdate);

        @*The StateHasChanged makes sure that the component is notified to re-render the data*@
        InvokeAsync(StateHasChanged);
        @*The course list should be fetched again to diplay the newly created course along with the existing the course list *@
        GetGraduateCourses();

    }

}
