@*//Authors: Shravan A, Bhavya MU, Sneha M , Karan Kumar , Bhargavi S Adiga
    Date:19/02/2021
    Aim: 1.To get the teacher name on search
         2.To select the Teacher name
         3.Add the Graduate Course for the selected teachers
         4.Remove the Graduate course for the teachers*@

@page "/TeacherGraduateCourseQualification"
@*Aim:Referring usecase of TeacherBasicInformation *@
@using TuitionsOnlineAdmin.UseCases.TeacherBasicInformations.ViewTeacherBasicInformationScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.TeacherGraduateCourse_Qualifications.ViewTeacherGraduateCourseQualificationScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.TeacherGraduateCourse_Qualifications.CreateTeacherGraduateCourseQualificationScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.GraduateCourses.ViewGraduateCourseScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.TeacherGraduateCourse_Qualifications.EditGraduateCourseQualification.Interfaces
@using TuitionsOnlineAdmin.CoreBusiness


@inject IViewTeacherBasicInformationUseCase diIViewTeacherBasicInformationUseCase
@inject IViewTeacherGraduateCourseQualificationUseCase diIViewTeacherGraduateCourseQualificationUseCase
@inject IViewGraduateCourseUseCase diIViewGraduateCourseUseCase
@inject ICreateTeacherGraduateCourseQualificationUseCase diICreateTeacherGraduateCourseQualificationUseCase
@inject IEditGraduateCourseQualificationUseCase diIEditGraduateCourseQualificationUseCase
@inject BusinessMessage instanceOfBusinessMessage

<div>

    @* To display the success message on click of save when new Graduate course is created *@
    @if (createMessage && resultForCreate == "done")
    {
        <p class="success_message_style">
            Your graduate course  has been added successfully!
        </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForCreate 
        </p>
    }
</div>

<div>

    @* To display the success message on click of save when Graduate course is updated *@
    @if (updateMessage && resultForUpdate == "done")
    {
        <p class="success_message_style">
            Your graduate course  has been removed successfully !
        </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForUpdate
        </p>
    }
</div>

<div>

    @* To display server error message *@
    @if (viewError && @graduateCourseList == null)
    {
        <p class="success_message_style">
            @instanceOfBusinessMessage.UNKNOWN_SERVER_ERROR_VIEW_TEACHERGRADUATECOURSE_QUALIFICATIONS
        </p>
    }
</div>



<DxGridLayout CssClass="mw-1100 dxgridlayout_style" style=" height: auto; margin-bottom: 10px;">
    <Rows>
        <DxGridLayoutRow Height="auto" />
    </Rows>
    <Columns>
        <DxGridLayoutColumn Width="50%" />
        <DxGridLayoutColumn Width="50%" />
    </Columns>
    <Items>
        <DxGridLayoutItem Row="0" Column="0">
            <Template>
                <div class=" dxgridlayoutitem_style">
                    <center><h5>Select Teacher Name</h5></center>

                    <div>

                        <DxTextBox NullText="Search Teachers" SizeMode="SizeMode.Small" style=" width:550px;" TextChanged="@((searchTeacherKeyword) => onChangeTeacherSearchText(searchTeacherKeyword))"> </DxTextBox>


                        <div class="teachersearchbutton_style">

                            <DxButton RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Search Teacher" SizeMode="SizeMode.Small" Enabled="@enableOrDisableSearchTeacherButton" Click="@getTeacherListOnSearch" />
                        </div>
                    </div>
                    <br />
                    @if (enableSearchTeacherButton)
                    {
                        <DxDataGrid Data="@teacherDetailsList"
                                    @bind-SingleSelectedDataRow="@onSelectOfTeacher"
                                    CssClass="mw-1100">
                            <DxDataGridSelectionColumn Width="50px"></DxDataGridSelectionColumn>
                            <DxDataGridColumn Field="@nameof(TeacherBasicInformation.Teacher_Name)" Caption="Teacher Name"></DxDataGridColumn>
                            <DxDataGridColumn Field="@nameof(TeacherBasicInformation.Email_Address)" Caption="Teacher Email Address"></DxDataGridColumn>
                        </DxDataGrid>

                        <div class="loadbutton_style">

                            <DxButton RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Load Graduate Course" SizeMode="SizeMode.Small" Enabled="@enableOrDisableLoadGraduateCourseButton" Click="@loadGraduateCourseQualifications" />
                        </div>
                    }
                </div>

                <br />

                @*Aim:Search box for graduate course*@
                @if (enableGraduateCourseGridLayout)
                {
                    <div class=" dxgridlayoutitem_style">
                        <center><h5>Select Graduate Course</h5></center>

                        <div>
                            <DxTextBox NullText="Search Graduate Courses" SizeMode="SizeMode.Small" style=" width:550px;" TextChanged="@((searchGraduateCourseKeyword) => onChangeGradauteCourseSearchText(searchGraduateCourseKeyword))"> </DxTextBox>


                            <div class="coursesearchbutton_style">

                                <DxButton RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Search Graduate Course" SizeMode="SizeMode.Small" Enabled="@enableOrDisableSearchGraduateCourseButton" Click="@getGraduateCourseOnSearch" />
                            </div>
                        </div>
                        <br />
                        @if (enableSearchGraduateCourseButton)
                        {
                            <DxDataGrid Data="@graduateCourseList"
                                        @ref="@graduateCourseGrid"
                                        KeyFieldName="@nameof(GraduateCourse.GraduateCourseId)"
                                        @bind-SingleSelectedDataRow="@onselectofgraduatecourse"
                                        CssClass="datagrid-border-radius-top-0 mw-1100">
                                <DxDataGridSelectionColumn></DxDataGridSelectionColumn>
                                <DxDataGridColumn Field="@nameof(GraduateCourse.GraduateCourseName)" Caption="Graduate Course"></DxDataGridColumn>


                            </DxDataGrid>
                            <div class="loadbutton_style">
                                <DxButton RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Add Graduate Course" SizeMode="SizeMode.Small" Click="@AddGraduateCourses" />
                            </div>
                        }
                    </div>
                }
                <br />

            </Template>
        </DxGridLayoutItem>
        @if (enableGraduateCourseGridLayout)
        {
            <DxGridLayoutItem Row="1" Column="1">
                <Template>


                    <DxDataGrid Data="@teacherGraduateCourseQualificationList"
                                SelectionMode="DataGridSelectionMode.MultipleSelectedDataRows"
                                @bind-MultipleSelectedDataRows="@onSelectOfTeacherGraduateCourseQualification">
                        <DxDataGridSelectionColumn></DxDataGridSelectionColumn>

                        <DxDataGridColumn Field="@nameof(TeacherGraduateCourse_QualificationWithForeignKeys.TeacherName)" Caption="Teacher Name"></DxDataGridColumn>
                        <DxDataGridColumn Field="@nameof(TeacherGraduateCourse_QualificationWithForeignKeys.GraduateCourseName)" Caption="Graduate Course Name"></DxDataGridColumn>

                    </DxDataGrid>
                    <div class="loadbutton_style">
                        <DxButton RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Remove Graduate Course" SizeMode="SizeMode.Small" Click="@RemoveGraduateCourse" />
                    </div>
                </Template>
            </DxGridLayoutItem>
        }
    </Items>
</DxGridLayout>

@code{
    //Variable to hold the success message on create of Graduate Course
    public string resultForCreate;

    //Variable to hold the success message on update of Graduate Course
    public string resultForUpdate;

    //Boolean variable to display the message on create of Graduate Course
    bool createMessage = false;

    //Boolean variable to display the error message if the user is unable to view the data
    bool viewError = false;

    //Boolean variable to display the message on update of Graduate Course
    bool updateMessage = false;


    DxDataGrid<TeacherBasicInformation> teacherGrid;
    DxDataGrid<GraduateCourse> graduateCourseGrid;
    DxDataGrid<TeacherGraduateCourse_Qualification> teacherGraduateCourseQualificationGrid;

    //Aim : Used to capture the keyword entered by the user
    public string searchTeacherKeyword;

    //Aim : To hold the details of the teacher selected by the user
    TeacherBasicInformation selectedTeacherDetails;

    //Aim : To enable or disable teacher search button
    public bool enableOrDisableSearchTeacherButton = false;

    //Aim : To enable or disable graduate course search button
    public bool enableOrDisableLoadGraduateCourseButton = false;

    public bool enableGraduateCourseGridLayout = false;

    //Aim : Used to capture the keyword entered by the user
    public bool enableOrDisableSearchGraduateCourseButton = false;

    //Aim:To enable Search Teacher table
    public bool enableSearchTeacherButton = false;

    //Aim:To enable search graduate course table
    public bool enableSearchGraduateCourseButton = false;

    public bool enableTeacherGraduateCourseQualificationGridLayout = false;

    //Aim : Used to capture the keyword entered by the user
    public string searchGraduateCourseKeyword;

    public int selectedTeacherId;

    public GraduateCourse selectedGraduateCourseList;

    public int selectedGraduateId;

    int SelectedCount { get; set; }

    int StoredSelectedCount { get; set; }

    int StoredUnselectedCount { get; set; }

    //Aim : To hold the list of teachers /single record of teachers details of type TeacherBasicInformation to display in the data grid.
    IEnumerable<TeacherBasicInformation> teacherDetailsList = Enumerable.Empty<TeacherBasicInformation>();

    //Aim : To hold the list of teachers /single record of GraduateCourse details of type GraduateCourse to display in the data grid.
    IEnumerable<GraduateCourse> graduateCourseList = Enumerable.Empty<GraduateCourse>();

    //Aim : To hold the list of teachers /single record of TeacherGraduateCourse_Qualification details of type TeacherGraduateCourse_Qualification to display in the data grid.
    IEnumerable<TeacherGraduateCourse_QualificationWithForeignKeys> teacherGraduateCourseQualificationList = new List<TeacherGraduateCourse_QualificationWithForeignKeys>();

    IEnumerable<TeacherGraduateCourse_QualificationWithForeignKeys> selectedTeacherGraduateCourseQualifications;

    //Aim : To determine if the user has entered any data in the search text box and to enable or disable the teacher search button
    public void onChangeTeacherSearchText(string searchTeacherText)
    {
        searchTeacherKeyword = searchTeacherText;
        enableOrDisableSearchTeacherButton = true;

    }

    //Aim: To fetch teacher/teachers details on click of teacher search button :
    //IViewTeacherBasicInformationUseCase is used for fetching the teacher basic information list for the searched key.

    public void getTeacherListOnSearch()
    {
        teacherDetailsList = diIViewTeacherBasicInformationUseCase.ViewTeacherBasicInformationList(searchTeacherKeyword);
        viewError = true;

        enableSearchTeacherButton = true;
    }

    //Aim : To call getTeacherGraduateCourseQualifications method and to enable the "Load Graduate Course" button.

    public TeacherBasicInformation onSelectOfTeacher
    {
        get { return selectedTeacherDetails; }
        set
        {
            selectedTeacherDetails = value;

            selectedTeacherId = selectedTeacherDetails.TeacherId;
            enableOrDisableLoadGraduateCourseButton = true;

            InvokeAsync(StateHasChanged);
        }
    }

    //Aim:
    //1.to enable the graduate course grid.
    //2.to enable the teacher graduate course qualification grid.
    //3.to invoke the method "getTeacherGraduateCourseQualifications"

    public void loadGraduateCourseQualifications()
    {
        enableGraduateCourseGridLayout = true;

        enableTeacherGraduateCourseQualificationGridLayout = true;
        getTeacherGraduateCourseQualifications();
    }

    //Aim : To determine if the user has entered any data in the graduate course search text box and to enable or disable the graduate course search button

    public void onChangeGradauteCourseSearchText(string searchGraduateCourseText)
    {
        searchGraduateCourseKeyword = searchGraduateCourseText;
        enableOrDisableSearchGraduateCourseButton = true;

    }

    //Aim:
    //1.To fetch  graduate courses(which is matched with the searched criteria) on click of graduate course search button :
    // IViewGraduateCourseUseCase is used for fetching the graduate course list for the searched key.
    //2.To invoke a method "getAvailableGraduateCourses" for obtaining only the courses that are not already associated with the teacher and display the list.

    public void getGraduateCourseOnSearch()
    {
        graduateCourseList = diIViewGraduateCourseUseCase.ViewGraduateCourse(searchGraduateCourseKeyword);
        enableSearchGraduateCourseButton = true;

    }

    //Aim : To capture the selected graduate course value and to enable the "Add Graduate Course" button.

    public GraduateCourse onselectofgraduatecourse
    {
        get { return selectedGraduateCourseList; }
        set
        {

            selectedGraduateCourseList = value;

            selectedGraduateId = selectedGraduateCourseList.GraduateCourseId;

            InvokeAsync(StateHasChanged);
        }

    }

    //Aim : To fetch teacher graduate course qualifications from TeacherGraduateCourseQualification table for the selected teacher.

    public void getTeacherGraduateCourseQualifications()
    {

        teacherGraduateCourseQualificationList = diIViewTeacherGraduateCourseQualificationUseCase.ViewTeacherGraduateCourseQualification(selectedTeacherId);

    }

    //Aim: To save the teacher graduate course qualification record on click of save button.

    private async void AddGraduateCourses()
    {
        // var addGraduateCourse = diICreateTeacherGraduateCourseQualificationUseCase.CreateTeacherGraduateCourseQualification(selectedTeacherId, selectedGraduateId);
        resultForCreate = diICreateTeacherGraduateCourseQualificationUseCase.CreateTeacherGraduateCourseQualification(selectedTeacherId, selectedGraduateId);
        createMessage = true;

        getTeacherGraduateCourseQualifications();
        //System.Threading.Thread.Sleep(1000);
        //createMessage = false;
    }

    //Aim : To capture the selected teacher graduate course qualification value and to enable the "Remove Graduate Course" button.

    IEnumerable<TeacherGraduateCourse_QualificationWithForeignKeys> onSelectOfTeacherGraduateCourseQualification
    {
        get { return selectedTeacherGraduateCourseQualifications; }
        set
        {
            selectedTeacherGraduateCourseQualifications = value;

            InvokeAsync(StateHasChanged);
        }
    }

    //Aim: To remove the teacher graduate course qualification record on click of "Remove Graduate Course" button.

    public void RemoveGraduateCourse()
    {
        List<TeacherGraduateCourse_QualificationWithForeignKeys> List = selectedTeacherGraduateCourseQualifications.ToList();
        // var removeGraduateCourse = diIEditGraduateCourseQualificationUseCase.EditGraduateCourseQualification(List);
        resultForUpdate = diIEditGraduateCourseQualificationUseCase.EditGraduateCourseQualification(List);
        updateMessage = true;
        getTeacherGraduateCourseQualifications();
        InvokeAsync(StateHasChanged);
    }
}




