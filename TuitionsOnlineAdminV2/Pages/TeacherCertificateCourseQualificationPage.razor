@page "/TeacherCertificateCourseQualification"

@*Authors: Shravan A, Bhavya MU, Sneha M , Karan Kumar , Bhargavi S Adiga
    Date:19/02/2021
    Aim: To create a serach box and to display the list of teachers  *@


@using TuitionsOnlineAdmin.UseCases.TeacherBasicInformations.ViewTeacherBasicInformationScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.CertificateCourses.ViewCertificateCourseScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.TeacherCertificateCourse_Qualifications.ViewTeacherCertificateCourseQualificationScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.TeacherCertificateCourse_Qualifications.CreateTeacherCertificateCourseQualificationScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.TeacherCertificateCourse_Qualifications.EditTeacherCertificateCourseQualificationScreen.Interfaces
@using TuitionsOnlineAdmin.CoreBusiness


@inject IViewTeacherBasicInformationUseCase diIViewTeacherBasicInformationUseCase
@inject IViewCertificateCourseUseCase diIViewCertificateCourseUseCase
@inject IViewTeacherCertificateCourseQualificationUseCase diIViewTeacherCertificateCourseQualificationUseCase
@inject ICreateTeacherCertificateCourseQualificationUseCase diCreateTeacherCertificateCourseQualificationUseCase
@inject IEditTeacherCertificateCourseQualificationUseCase diEditTeacherCertificateCourseQualificationUseCase
@inject BusinessMessage instanceOfBusinessMessage

<div>

    @* To display the success message on click of save when new certificate course is created *@
    @if (createMessage && resultForCreate == "done")
    {
        <p class="success_message_style">
            Your certificate course  has been added successfully !
        </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForCreate
        </p>
    }
</div>

<div>

    @* To display the success message on click of save when certificate course is updated *@
    @if (updateMessage && resultForUpdate == "done")
    {
    <p class="success_message_style">
        Your certificate course  has been removed successfully !
    </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForUpdate
        </p>
    }
</div>

<div>

    @* To display server error message *@
    @if (viewError && @certificateCourseList == null)
    {
        <p class="success_message_style">
            @instanceOfBusinessMessage.UNKNOWN_SERVER_ERROR_VIEW_TEACHERCERTIFICATECOURSE_QUALIFICATIONS
        </p>
    }
</div>


<DxGridLayout CssClass="mw-1100 dxgridlayout_style" style=" height: auto; margin-bottom: 10px;">
    <Rows>
        <DxGridLayoutRow Height="auto" />
    </Rows>
    <Columns>
        <DxGridLayoutColumn Width="50%" />
        <DxGridLayoutColumn Width="50%" />
    </Columns>
    <Items>
        <DxGridLayoutItem Row="0" Column="0">
            <Template>
                <div class=" dxgridlayoutitem_style">
                    <center><h5>Select Teacher Name</h5></center>

                    <div>

                        <DxTextBox NullText="Search Teachers" SizeMode="SizeMode.Small" style=" width:550px;" TextChanged="@((searchTeacherKeyword) => onChangeTeacherSearchText(searchTeacherKeyword))"> </DxTextBox>


                        <div class="teachersearchbutton_style">

                            <DxButton RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Search Teacher" SizeMode="SizeMode.Small" Enabled="@enableOrDisableSearchTeacherButton" Click="@getTeacherListOnSearch" />
                        </div>
                    </div>
                    <br />
                    @if (enableSearchTeacherButton)
                    {
                        <DxDataGrid Data="@teacherDetailsList"
                                    @bind-SingleSelectedDataRow="@onSelectOfTeacher"
                                    CssClass="mw-1100">
                            <DxDataGridSelectionColumn Width="50px"></DxDataGridSelectionColumn>
                            <DxDataGridColumn Field="@nameof(TeacherBasicInformation.Teacher_Name)" Caption="Teacher Name"></DxDataGridColumn>
                            <DxDataGridColumn Field="@nameof(TeacherBasicInformation.Email_Address)" Caption="Teacher Email Address"></DxDataGridColumn>
                        </DxDataGrid>

                        <div class="loadbutton_style">

                            <DxButton RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Load Certificate Course" SizeMode="SizeMode.Small" Enabled="@enableOrDisableLoadCertificateCourseButton" Click="@loadCertificateCourseQualifications" />
                        </div>
                    }
                </div>

                <br />

                @*Aim:Search box for Certificate course*@
                @if (enableCertificateCourseGridLayout)
                {
                    <div class=" dxgridlayoutitem_style">
                        <center><h5>Select Certificate Course</h5></center>

                        <div>
                            <DxTextBox NullText="Search Certificate Courses" SizeMode="SizeMode.Small" style=" width:550px;" TextChanged="@((searchCertificateCourseKeyword) => onChangeCertificateCourseSearchText(searchCertificateCourseKeyword))"> </DxTextBox>

                            <div class="coursesearchbutton_style">

                                <DxButton RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Search Certificate Course" SizeMode="SizeMode.Small" Enabled="@enableOrDisableSearchCertificateCourseButton" Click="@getCertificateCourseOnSearch" />
                            </div>
                        </div>
                        <br />
                        @if (enableSearchCertificateCourseButton)
                        {
                            <DxDataGrid Data="@certificateCourseList"
                                        @ref="@certificateCourseGrid"
                                        KeyFieldName="@nameof(CertificateCourse.CertificateCourseId)"
                                        @bind-SingleSelectedDataRow="@onselectofcertificatecourse"
                                        CssClass="datagrid-border-radius-top-0 mw-1100">
                                <DxDataGridSelectionColumn></DxDataGridSelectionColumn>
                                <DxDataGridColumn Field="@nameof(CertificateCourse.CertificateCourseName)" Caption="Certificate Course"></DxDataGridColumn>


                            </DxDataGrid>
                            <div class="loadbutton_style">
                                <DxButton RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Add Certificate Course" SizeMode="SizeMode.Small" Click="@AddCertificateCourses" />
                            </div>
                        }
                    </div>
                }
                <br />

            </Template>
        </DxGridLayoutItem>
        @if (enableCertificateCourseGridLayout)
        {
            <DxGridLayoutItem Row="1" Column="1">
                <Template>


                    <DxDataGrid Data="@teacherCertificateCourseQualificationList"
                                SelectionMode="DataGridSelectionMode.MultipleSelectedDataRows"
                                @bind-MultipleSelectedDataRows="@onSelectOfTeacherCertificateCourseQualification">
                        <DxDataGridSelectionColumn></DxDataGridSelectionColumn>

                        <DxDataGridColumn Field="@nameof(TeacherCertificateCourse_QualificationWithForeignKeys.TeacherName)" Caption="Teacher Name"></DxDataGridColumn>
                        <DxDataGridColumn Field="@nameof(TeacherCertificateCourse_QualificationWithForeignKeys.CertificateCourseName)" Caption="Certificate Course Name"></DxDataGridColumn>

                    </DxDataGrid>
                    <div class="loadbutton_style">
                        <DxButton RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Contained" Text="Remove Certificate Course" SizeMode="SizeMode.Small" Click="@RemoveCertificateCourse" />
                    </div>
                </Template>
            </DxGridLayoutItem>
        }
    </Items>
</DxGridLayout>

@code {
    //Variable to hold the success message on create of Graduate Course
    public string resultForCreate;

    //Variable to hold the success message on update of Graduate Course
    public string resultForUpdate;

    //Boolean variable to display the message on create of Graduate Course
    bool createMessage = false;

    //Boolean variable to display the error message if the user is unable to view the data
    bool viewError = false;

    //Boolean variable to display the message on update of Graduate Course
    bool updateMessage = false;

    DxDataGrid<TeacherBasicInformation> teacherGrid;
    DxDataGrid<CertificateCourse> certificateCourseGrid;
    DxDataGrid<TeacherCertificateCourse_Qualification> teacherCertificateCourseQualificationGrid;

    //Aim : Used to capture the keyword entered by the user
    public string searchTeacherKeyword = null;

    //Aim : To hold the details of the teacher selected by the user
    TeacherBasicInformation selectedTeacherDetails;


    //Aim : To enable or disable teacher search button
    public bool enableOrDisableSearchTeacherButton = false;

    //Aim : To enable or disable Certificate course search button
    public bool enableOrDisableLoadCertificateCourseButton = false;


    public bool enableCertificateCourseGridLayout = false;

    //Aim : Used to capture the keyword entered by the user
    public bool enableOrDisableSearchCertificateCourseButton = false;

    //Aim:To enable Search Teacher table
    public bool enableSearchTeacherButton = false;

    //Aim:To enable search Certificate course table
    public bool enableSearchCertificateCourseButton = false;

    public bool enableTeacherCertificateCourseQualificationGridLayout = false;

    //Aim : Used to capture the keyword entered by the user
    public string searchCertificateCourseKeyword;

    public int selectedTeacherId;

    public CertificateCourse selectedCertificateCourseList;

    public int selectedCertificateId;

    int SelectedCount { get; set; }

    int StoredSelectedCount { get; set; }

    int StoredUnselectedCount { get; set; }

    //Aim : To hold the list of teachers /single record of teachers details of type TeacherBasicInformation to display in the data grid.
    IEnumerable<TeacherBasicInformation> teacherDetailsList = Enumerable.Empty<TeacherBasicInformation>();

    //Aim : To hold the list of teachers /single record of CertificateCourse details of type CertificateCourse to display in the data grid.
    IEnumerable<CertificateCourse> certificateCourseList = Enumerable.Empty<CertificateCourse>();

    //Aim : To hold the list of teachers /single record of TeacherCertificateCourse_Qualification details of type TeacherCertificateCourse_Qualification to display in the data grid.
    IEnumerable<TeacherCertificateCourse_QualificationWithForeignKeys> teacherCertificateCourseQualificationList = new List<TeacherCertificateCourse_QualificationWithForeignKeys>();

    IEnumerable<TeacherCertificateCourse_QualificationWithForeignKeys> selectedTeacherCertificateCourseQualifications;

    //Aim : To determine if the user has entered any data in the search text box and to enable or disable the teacher search button
    public void onChangeTeacherSearchText(string searchTeacherText)
    {
        searchTeacherKeyword = searchTeacherText;
        enableOrDisableSearchTeacherButton = true;

    }

    //Aim: To fetch teacher/teachers details on click of teacher search button :
    //IViewTeacherBasicInformationUseCase is used for fetching the teacher basic information list for the searched key.
    public void getTeacherListOnSearch()
    {

        teacherDetailsList = diIViewTeacherBasicInformationUseCase.ViewTeacherBasicInformationList(searchTeacherKeyword);

        enableSearchTeacherButton = true;
    }

    //Aim : To call getTeacherCertificateCourseQualifications method and to enable the "Load Certificate Course" button.
    public TeacherBasicInformation onSelectOfTeacher
    {
        get { return selectedTeacherDetails; }
        set
        {
            selectedTeacherDetails = value;

            selectedTeacherId = selectedTeacherDetails.TeacherId;
            enableOrDisableLoadCertificateCourseButton = true;

            InvokeAsync(StateHasChanged);
        }
    }

    //Aim:
    //1.to enable the Certificate course grid.
    //2.to enable the teacher Certificate course qualification grid.
    //3.to invoke the method "getTeacherCertificateCourseQualifications"

    public void loadCertificateCourseQualifications()
    {
        enableCertificateCourseGridLayout = true;

        enableTeacherCertificateCourseQualificationGridLayout = true;
        getTeacherCertificateCourseQualifications();
    }

    //Aim : To determine if the user has entered any data in the Certificate course search text box and to enable or disable the Certificate course search button

    public void onChangeCertificateCourseSearchText(string searchCertificateCourseText)
    {
        searchCertificateCourseKeyword = searchCertificateCourseText;
        enableOrDisableSearchCertificateCourseButton = true;

    }

    //Aim:
    //1.To fetch  Certificate courses(which is matched with the searched criteria) on click of Certificate course search button :
    // IViewCertificateCourseUseCase is used for fetching the Certificate course list for the searched key.
    //2.To invoke a method "getAvailableCertificateCourses" for obtaining only the courses that are not already associated with the teacher and display the list.

    public void getCertificateCourseOnSearch()
    {
        certificateCourseList = diIViewCertificateCourseUseCase.ViewCertificateCourse(searchCertificateCourseKeyword);
        enableSearchCertificateCourseButton = true;

    }

    //Aim : To capture the selected Certificate course value and to enable the "Add Certificate Course" button.
    public CertificateCourse onselectofcertificatecourse
    {
        get { return selectedCertificateCourseList; }
        set
        {
            // Console.WriteLine(selectedPostGraduateCourseList);
            selectedCertificateCourseList = value;

            selectedCertificateId = selectedCertificateCourseList.CertificateCourseId;

            InvokeAsync(StateHasChanged);
        }

    }

    //Aim : To fetch teacher Certificate course qualifications from TeacherCertificateCourseQualification table for the selected teacher.

    public void getTeacherCertificateCourseQualifications()
    {

        teacherCertificateCourseQualificationList = diIViewTeacherCertificateCourseQualificationUseCase.ViewTeacherCertificateCourseQualification(selectedTeacherId);

    }

    //Aim: To save the teacher Certificate course qualification record on click of save button.

    public void AddCertificateCourses()
    {

        resultForCreate = diCreateTeacherCertificateCourseQualificationUseCase.CreateTeacherCertificateCourseQualification(selectedTeacherId, selectedCertificateId);
        createMessage = true;
        getTeacherCertificateCourseQualifications();
    }

    //Aim : To capture the selected teacher Certificate course qualification value and to enable the "Remove Certificate Course" button.
    IEnumerable<TeacherCertificateCourse_QualificationWithForeignKeys> onSelectOfTeacherCertificateCourseQualification
    {
        get { return selectedTeacherCertificateCourseQualifications; }
        set
        {
            selectedTeacherCertificateCourseQualifications = value;

            InvokeAsync(StateHasChanged);
        }
    }

    //Aim: To remove the teacher Certificate course qualification record on click of "Remove Certificate Course" button.
    public void RemoveCertificateCourse()
    {
        List<TeacherCertificateCourse_QualificationWithForeignKeys> List = selectedTeacherCertificateCourseQualifications.ToList();
        resultForUpdate = diEditTeacherCertificateCourseQualificationUseCase.EditTeacherCertificateCourseQualification(List);
        updateMessage = true;
        getTeacherCertificateCourseQualifications();

    }


}
