@* Authors: Shravan A, Bhavya MU, Sneha M , Karan Kumar , Bhargavi S Adiga
    Date: 14-01-2021
    Aim : To create, view ,edit Subject *@

@page "/subject"
@using TuitionsOnlineAdmin.UseCases.Subjects.CreateSubjectScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.Subjects.ViewSubjectScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.Subjects.UpdateSubjectScreen.Interface
@using TuitionsOnlineAdmin.CoreBusiness

@inject NavigationManager UriHelper
@inject ICreateSubjectUseCase instanceOfICreateSubjectUseCase
@inject IViewSubjectUseCase instanceOfIViewSubjectUseCase
@inject IUpdateSubjectUseCase instanceOfIUpdateSubjectUseCase
@inject BusinessMessage instanceOfBusinessMessage
@* this TextBox is used to search the data  *@
<div>
    <DxTextBox TextChanged="@((searchText) => OnTextChanged(searchText))"
               ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
               SizeMode="SizeMode.Small"
               NullText="Search for subjects ...."></DxTextBox>
</div>
<br />


<div>
    @* To display the success message on click of save when new subject is created *@
    @if (createMessage && resultForCreate == "done")
    {
        <p class="success_message_style">
            Your Subject "@subjectName" has been created successfully !
        </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForCreate
        </p>
    }
</div>


@* To display the success message on click of save when subject is updated *@
<div>
    @if (updateMessage && resultForUpdate == "done")
    {
        <p class="success_message_style">
            Your Subject "@subjectName" has been updated successfully !
        </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForUpdate
        </p>
    }
</div>

@* To display server error message *@
<div>
    @if (viewError && subjectList == null)
    {
        <p class="success_message_style">
            @instanceOfBusinessMessage.UNKNOWN_SERVER_ERROR_VIEW_SUBJECT
        </p>
    }
</div>


@*Table is used to display the Subject data *@
<DxDataGrid Data="@subjectList"
            RowInserting="@((newSubject) => CreateSubject(newSubject))"
            RowUpdating="@((subjectToBeUpdated, newValue) => UpdateSubject(subjectToBeUpdated, newValue))"
            PageSize="5">
    <DxDataGridColumn Field="@nameof(Subject.SubjectName)" Width="300px" />
    <DxDataGridCheckBoxColumn Field="@nameof(Subject.Active)" Width="200px" />
    <DxDataGridCommandColumn Width="200px" DeleteButtonVisible="false" />
</DxDataGrid>

@code {

    @* To hold the hold the Subject details*@
    IEnumerable<Subject> subjectList = Enumerable.Empty<Subject>();

    @*To hold the search text*@
    String searchkey;

    //Variable to hold the success message on create of subject
    public string resultForCreate;

    //Boolean variable to display the message on create of subject
    bool createMessage = false;

    //Variable to hold the success message on update of subject
    public string resultForUpdate;

    //Boolean variable to display the message on update of subject
    bool updateMessage = false;

    //Boolean variable to display the error message if the user is unable to view the data
    bool viewError = false;

    //Variable to hold the subject name
    public string subjectName;

    @*The init method is to invoke the Subject list when the page is loaded*@
    protected override void OnInitialized()
    {

        @*To invoke the GetSubjects() to fetch the Subject list to be displayed*@
        GetSubjects(searchkey);

    }
    @*To get Subject list to be displayed in the data grid columns*@
    public void GetSubjects(String searchkeyword)
    {
        subjectList = instanceOfIViewSubjectUseCase.ViewSubject(searchkeyword);
        viewError = true;
    }

    //Method to capture the user search result
    void OnTextChanged(String searchText)
    {

        searchkey = searchText;
        @*To invoke the component to re-render the data*@

        InvokeAsync(StateHasChanged);

        @*The subject list should be fetched again to display the newly created subject along with the existing the subject list *@
        GetSubjects(searchkey);
    }



    @*The CreateSubject() method is responsible for capturing the details enetred by the user and send it to the database.*@
    private async void CreateSubject(Dictionary<string, object> newSubject)
    {
        @* To hold the new Subject to be created *@
        Subject createSubject = new Subject();
        @*The new value comes in the form of key value pair*@
        foreach (var field in newSubject.Keys)
        {
            @*For each incoming key we check and assign the values to newSubject *@
            switch (field)
            {
                case "SubjectName":
                    subjectName = createSubject.SubjectName = (string)newSubject[field];
                    break;
                case "Active":
                    createSubject.Active = (bool)newSubject[field];
                    break;
            }
        }

        @*To invoke the method to create new Subject*@
        resultForCreate = instanceOfICreateSubjectUseCase.CreateSubject(createSubject);
        createMessage = true;
        @*The StateHasChanged makes sure that the component is notified to re-render the data*@
        await InvokeAsync(StateHasChanged);
        @*The subject list should be fetched again to display the newly created Subject along with the existing the subject list *@
        GetSubjects(searchkey);

        //Used to refresh the razor page
        await Task.Delay(2000);
        //Used to refresh the razor page
        UriHelper.NavigateTo("subject", forceLoad: true);

    }

    //To take and update the value for  Subject
    private async void UpdateSubject(Subject subjectToBeUpdated, Dictionary<string, object> newValue)
    {

        foreach (var subject in newValue.Keys)
        {
            switch (subject)
            {
                case "SubjectName":
                    subjectName = subjectToBeUpdated.SubjectName = (string)newValue[subject];
                    break;
                case "Active":
                    subjectToBeUpdated.Active = (bool)newValue[subject];
                    break;
            }

        }

        @*subjectToBeUpdated this variable holds the updated value and is sent to the database*@
        resultForUpdate = instanceOfIUpdateSubjectUseCase.UpdateSubject(subjectToBeUpdated);
        updateMessage = true;
        @*The StateHasChanged makes sure that the component is notified to re-render the data*@
        await InvokeAsync(StateHasChanged);
        @*The subject list should be fetched again to display the newly created subject along with the existing the subject list *@
        GetSubjects(searchkey);

        //Used to refresh the razor page
        await Task.Delay(2000);
        //Used to refresh the razor page
        UriHelper.NavigateTo("subject", forceLoad: true);

    }


}
