@* Authors: SA,BM,SM
     Date: 14-01-2021
    Aim : To create, view ,edit Doctorate course*@

@page "/doctoratecourse"
@using TuitionsOnlineAdmin.UseCases.DoctorateCourses.CreateDoctorateCourseScreen.Interface
@using TuitionsOnlineAdmin.UseCases.DoctorateCourses.ViewDoctorateCourseScreen.Interfaces
@using TuitionsOnlineAdmin.UseCases.DoctorateCourses.UpdateDoctorateCourseScreen.Interface
@using TuitionsOnlineAdmin.CoreBusiness
@inject ICreateDoctorateCourseUseCase instanceOfICreateDoctorateCourseUseCase
@inject IViewDoctorateCourseUseCase instanceOfIViewDoctorateCourseUseCase
@inject IUpdateDoctorateCourseUseCase instanceOfIUpdateDoctorateCourseUseCase
@inject BusinessMessage instanceOfBusinessMessage


<div>
    @* this TextBox is used to search the data  *@
    <DxTextBox TextChanged="@((searchText) => OnTextChanged(searchText))"
               ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
               SizeMode="SizeMode.Small"
               NullText="Search for doctorate courses ...."></DxTextBox>
</div>
<br />
<div>
    @if (viewErrorForCreate && resultForCreate == "done")
    {
        <p class="success_message_style">
            Your Doctorate course "@doctorateCourse" has been created successfully !
        </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForCreate
        </p>
    }
</div>

<div>

    @if (viewErrorForUpdate && resultForUpdate == "done")
    {
    <p class="success_message_style">
        Your Doctorate course "@doctorateCourse" has been updated successfully !
    </p>
    }
    else
    {
        <p class="success_message_style">
            @resultForUpdate
        </p>
    }
</div>

<div>

    @* To display the success message on click of save *@
    @if (viewError && @doctorateCourseList == null)
    {
    <p class="success_message_style">
        @instanceOfBusinessMessage.UNKNOWN_SERVER_ERROR_VIEW_DOCTORATECOURSE
    </p>
    }
</div>
@*Table is used to display the data *@
<DxDataGrid Data="@doctorateCourseList"
            RowInserting="@((newCourse) => CreateDoctorateCourse(newCourse))"
            RowUpdating="@((doctorateCourseToBeUpdated, newValue) => UpdateDoctorateCourse(doctorateCourseToBeUpdated, newValue))"
            PageSize="5">
    <DxDataGridColumn Field="@nameof(DoctorateCourse.DoctorateCourseName)" Width="300px" />
    <DxDataGridCheckBoxColumn Field="@nameof(DoctorateCourse.Active)" Width="200px" />
    <DxDataGridCommandColumn Width="200px" DeleteButtonVisible="false" />
</DxDataGrid>


@code {
    @* To hold the hold the Course details*@
    IEnumerable<DoctorateCourse> doctorateCourseList = Enumerable.Empty<DoctorateCourse>();
    @*To hold the search text*@
String searchkey;


public string result;

string resultForCreate;
string resultForUpdate;
bool viewError = false;
bool viewErrorForCreate = false;
bool viewErrorForUpdate = false;
public string doctorateCourse;

bool saveMessage = false;
    @*The init method is to invoke the doctoratecourse list when the page is loaded*@
    protected override void OnInitialized()
    {

        @*To invoke the GetdoctorateCourses() to fetch the doctorate course list to be displayed*@
        GetDoctorateCourses(searchkey);

    }
    @*To get DoctorateCourse list to be displayed in the data grid columns*@
    public void GetDoctorateCourses(String searchkeyword)
    {
        doctorateCourseList = instanceOfIViewDoctorateCourseUseCase.ViewDoctorateCourse(searchkeyword);
        viewError = true;
    }
    void OnTextChanged(String searchText)
    {
        Console.WriteLine(searchText);
        searchkey = searchText;
        @*To invoke the component to re-render the data*@

        InvokeAsync(StateHasChanged);

        @*The course list should be fetched again to diplay the newly created course along with the existing the course list *@
        GetDoctorateCourses(searchkey);
    }


    //create doctorate course
    @*The CreateDoctorateCourse() method is responsible for capturing the details enetred by the user and send it to the database.*@
    void CreateDoctorateCourse(Dictionary<string, object> newCourse)
    {
        @* To hold the new course to be created *@
        DoctorateCourse createDoctorateCourse = new DoctorateCourse();
        @*The new value comes in the form of key value pair*@
        foreach (var field in newCourse.Keys)
        {
            @*For each incoming key we check and assign the values to newdoctorateCourse *@
    switch (field)
    {
        case "DoctorateCourseName":
            doctorateCourse =  createDoctorateCourse.DoctorateCourseName = (string)newCourse[field];
            break;
        case "Active":
            createDoctorateCourse.Active = (bool)newCourse[field];
            break;
    }
}

        @*To invoke the method to create new Doctorate course*@
        resultForCreate = instanceOfICreateDoctorateCourseUseCase.CreateDoctorateCourse(createDoctorateCourse);
        viewErrorForCreate = true;
        @*The StateHasChanged makes sure that the component is notified to re-render the data*@
        InvokeAsync(StateHasChanged);
        @*The course list should be fetched again to diplay the newly created course along with the existing the course list *@
    GetDoctorateCourses(searchkey);

}


//To take and update the value for  doctorate course
void UpdateDoctorateCourse(DoctorateCourse doctorateCourseToBeUpdated, Dictionary<string, object> newValue)
{

    foreach (var course in newValue.Keys)
    {
        switch (course)
        {
            case "DoctorateCourseName":
                doctorateCourse =  doctorateCourseToBeUpdated.DoctorateCourseName = (string)newValue[course];
                break;
            case "Active":
                doctorateCourseToBeUpdated.Active = (bool)newValue[course];
                break;
        }

    }

        @*doctorateCourseToBeUpdated this variable holds the updated value and is sent to the database*@
        resultForUpdate = instanceOfIUpdateDoctorateCourseUseCase.UpdateDoctorateCourse(doctorateCourseToBeUpdated);
        viewErrorForUpdate = true;
        @*The StateHasChanged makes sure that the component is notified to re-render the data*@
        InvokeAsync(StateHasChanged);
        @*The course list should be fetched again to diplay the newly created course along with the existing the course list *@
        GetDoctorateCourses(searchkey);

    }

}
